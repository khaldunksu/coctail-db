{"version":3,"sources":["Drinks.js","Filter.js","App.js","serviceWorker.js","index.js"],"names":["Drinks","state","drinks","fetch","this","props","match","params","categories","then","response","json","updateDrinks","Object","values","catch","console","error","arrDrinks","map","cocktail","push","setState","className","to","id","src","strDrinkThumb","alt","style","width","strDrink","React","Component","Filter","drinksList","updateCategories","strCategories","categ","cat","key","type","name","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4SA6CeA,E,2MAzCbC,MAAQ,CACNC,OAAQ,M,mFAGW,IAAD,OAClBC,MAAM,4DAAD,OAA6DC,KAAKC,MAAMC,MAAMC,OAAOC,aACvFC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACJ,EAAKE,aAAaC,OAAOC,OAAOJ,GAAU,OAE3CK,MAAMC,QAAQC,S,mCAINf,GACX,IAAMgB,EAAY,GAClBhB,EAAOiB,KAAI,SAAAC,GAAQ,OAAIF,EAAUG,KAAKD,MACtChB,KAAKkB,SAAS,CACZpB,OAAQgB,M,+BAIF,IACAhB,EAAWE,KAAKH,MAAhBC,OACR,OACE,6BACE,uBAAGqB,UAAU,eAAc,kBAAC,IAAD,CAASC,GAAG,KAAZ,SAC3B,uBAAGD,UAAU,QAAQnB,KAAKC,MAAMC,MAAMC,OAAOC,YAC7C,6BACA,yBAAKiB,GAAG,UACJvB,EAA2CA,EAAOiB,KAAI,SAAAC,GAAQ,OAC9D,yBAAKG,UAAU,QACb,2BAAG,yBAAKG,IAAKN,EAASO,cAAeC,IAAI,OAAOC,MAAO,CAAEC,MAAO,YAChE,uBAAGP,UAAU,YAAYH,EAASW,cAH3B,uBAAGR,UAAU,QAAb,iB,GA/BAS,IAAMC,WC2CZC,E,2MAvCbjC,MAAQ,CACNkC,WAAY,M,mFAEM,IAAD,OAPGhC,MADZ,+DAETM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAQtBF,MAAK,SAAAC,GACF,EAAK0B,iBAAiBvB,OAAOC,OAAOJ,GAAU,OAEjDK,MAAMC,QAAQC,S,uCAGFT,GACf,IAAM6B,EAAgB,GACtB7B,EAAWW,KAAI,SAAAmB,GAAK,OAAID,EAAchB,KAAKiB,EAAK,gBAChDlC,KAAKkB,SAAS,CACZa,WAAYE,M,+BAIN,IACDF,EAAe/B,KAAKH,MAApBkC,WACP,OACE,yBAAKZ,UAAU,QACb,kBAAC,IAAD,KACF,yBAAKA,UAAU,gBACVY,EAAiCA,EAAWhB,KAAI,SAAAoB,GACjD,OACE,uBAAGhB,UAAU,SAAUiB,IAAKD,GAC1B,kBAAC,IAAD,CAAWf,GAAE,WAAMe,IAAQ,2BAAOE,KAAK,WAAYC,KAAK,SAAmBH,MAHjE,gD,GA1BFP,IAAMC,WCiBbU,EAZH,kBACV,yBAAKpB,UAAU,OACb,4BAAQA,UAAU,UAAlB,aACA,kBAAC,IAAD,KACE,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOqB,OAAK,EAACC,KAAK,IAAIC,UAAWZ,IAC/B,kBAAC,IAAD,CAAOW,KAAK,eAAeC,UAAW9C,QCL1B+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS5C,MACvB,2DCXN6C,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD4H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhD,MAAK,SAAAiD,GACjCA,EAAaC,kB","file":"static/js/main.495e2af4.chunk.js","sourcesContent":["import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nclass Drinks extends React.Component {\r\n  state = {\r\n    drinks: null\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(`https://www.thecocktaildb.com/api/json/v1/1/filter.php?c=${this.props.match.params.categories}`)\r\n      .then(response => response.json())\r\n      .then(response => {\r\n        this.updateDrinks(Object.values(response)[0])\r\n      })\r\n      .catch(console.error)\r\n  }\r\n\r\n\r\n  updateDrinks(drinks) {\r\n    const arrDrinks = []\r\n    drinks.map(cocktail => arrDrinks.push(cocktail))\r\n    this.setState({\r\n      drinks: arrDrinks\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { drinks } = this.state;\r\n    return (\r\n      <div>\r\n        <p className=\"button_back\"><NavLink to=\"/\">Back</NavLink></p>\r\n        <p className=\"name\">{this.props.match.params.categories}</p>\r\n        <hr />\r\n        <div id=\"contet\">\r\n          {!drinks ? <p className=\"name\">Not yet</p> : drinks.map(cocktail =>\r\n            <div className=\"beer\">\r\n              <p><img src={cocktail.strDrinkThumb} alt=\"beer\" style={{ width: \"150px\" }} /></p>\r\n              <p className=\"strDrink\">{cocktail.strDrink}</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Drinks","import React from 'react'\r\nimport { NavLink,HashRouter } from 'react-router-dom'\r\nconst API = 'https://www.thecocktaildb.com/api/json/v1/1/list.php?c=list';\r\nconst getFilter = () => fetch(API)\r\n  .then(response => response.json());\r\n\r\n class Filter extends React.Component {\r\n  state = {\r\n    drinksList: null\r\n  }\r\n  componentDidMount(){\r\n    getFilter()\r\n      .then(response => {\r\n          this.updateCategories(Object.values(response)[0])\r\n      })\r\n      .catch(console.error);\r\n  }\r\n\r\n  updateCategories(categories){\r\n    const strCategories = []\r\n    categories.map(categ => strCategories.push(categ['strCategory']))\r\n    this.setState({\r\n      drinksList: strCategories\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const {drinksList } = this.state;\r\n    return (\r\n      <div className=\"main\">\r\n        <HashRouter>\r\n      <div className=\"filter_block\">\r\n        { !drinksList ? <p>Loading...</p> : drinksList.map(cat => {\r\n          return (\r\n            <p className=\"filter\"  key={cat}>\r\n              <NavLink   to={`/${cat}`} ><input type=\"checkbox\"  name=\"one\"/></NavLink >{cat}</p>\r\n                )\r\n            })\r\n        }\r\n      </div>\r\n      </HashRouter>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Filter\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {\r\n  HashRouter,\r\n  Route,\r\n  Switch,\r\n} from 'react-router-dom';\r\n\r\nimport Drinks from './Drinks';\r\nimport Filter from './Filter';\r\n\r\nconst App = () => (\r\n  <div className=\"App\">\r\n    <header className=\"header\">Cocktails</header>\r\n    <HashRouter>\r\n      <Switch>\r\n      <Route exact path=\"/\" component={Filter} />\r\n        <Route path=\"/:categories\" component={Drinks} />\r\n      </Switch>\r\n    </HashRouter>\r\n  </div>\r\n);\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}